type CategoryOne {
  id: ID! @fake(type:uuid)
  name: String! @fake(type:productName)
  imageUrl: String!
  orderOfDisplay: Int
}

type CategoryTwo {
  id: ID! @fake(type:uuid)
  name: String! @fake(type:productName)
  imageUrl: String!
  orderOfDisplay: Int
  categoryOne: CategoryOne!
}

type Mutation {
  updateCategoryOne(
    id: ID
    name: String!
    image: String
    orderOfDisplay: Int!
  ): CategoryOne!
  deleteCategoryOne(id: ID!): Boolean
  updateCategoryTwo(
    id: ID
    name: String!
    image: String
    orderOfDisplay: Int!
    categoryOne: ID!
  ): CategoryTwo!
  deleteCategoryTwo(id: ID!): Boolean
  updateProduct(
    id: ID
    name: String!
    categoryOne: ID!
    categoryTwo: ID!
    price: Float
    favorite: Boolean
    image: [String]
    weight: String
    purity: String
    gender: String
    size: String
    isOnDiscount: Boolean
    isHallmark: Boolean
    isHidden: Boolean
  ): Product!
  deleteProduct(id: ID!): Boolean
}

type Product {
  id: ID! @fake(type:uuid)
  name: String @fake(type:productName)
  categoryOne: CategoryOne!
  categoryTwo: CategoryTwo!
  price: Float
  favorite: Boolean
  weight: String
  purity: String
  gender: String
  size: String
  isOnDiscount: Boolean
  isHallmark: Boolean
  isHidden: Boolean
  images: [String]
}

type Query {
  categoriesOne(categoryOneId: ID): [CategoryOne]! @listLength(min:4,max:6)
  categoriesTwo(categoryTwoId: ID): [CategoryTwo]! @listLength(min:4,max:12)
  allProducts(productId: ID): [Product]! @listLength(min:24,max:56)
}
